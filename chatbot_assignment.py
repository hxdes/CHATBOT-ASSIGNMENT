# -*- coding: utf-8 -*-
"""Chatbot Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1no4RzqG0ygB6eVjHneiiN5hkgGEtyvdL
"""

!sudo apt-get update -y
!sudo apt-get install python3.9 python3.9-distutils -y
!sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
!sudo update-alternatives --config python3

!wget https://bootstrap.pypa.io/get-pip.py
!python3 get-pip.py

!pip install rasa==3.1.0

!rasa --version

!pip install websockets==10.0

!rasa --version

!pip install rasa==3.1.0 "sqlalchemy<2.0" --quiet

!pip install gradio==3.6.15 --quiet

!rasa --version
import gradio as gr
print("Rasa and Gradio are installed!")

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import gradio as gr
import numpy as np

#  Load Clinical Dataset
df = pd.read_csv("/content/Symptom2Disease.csv")
print("Dataset preview:")
print(df[['text', 'label']].head())

#  Train TF-IDF NLP Model
# Converts user symptom text into vector representation
# Aligns with NLU component in Rasa architecture
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df["text"])

# Define Chatbot Logic
def chatbot_response(user_input):
    """
    Predict disease based on symptom input.
    Includes triage relevance for clinical safety:
    - If similarity < 0.2, unknown symptom â†’ recommends human handover
    - Otherwise, predicts disease from dataset
    """
    user_vec = vectorizer.transform([user_input])
    similarity = cosine_similarity(user_vec, X)
    best_idx = np.argmax(similarity)

    if similarity[0][best_idx] < 0.2:
        return ("Sorry, your symptom is unclear. "
                "Please consult a healthcare professional.")
    else:
        predicted_disease = df["label"].iloc[best_idx]
        # Add brief evidence-based advice placeholder
        advice = f"Predicted condition: {predicted_disease}. "
        advice += "Seek medical advice for confirmation and treatment."
        return advice

# Launch Gradio UI
iface = gr.Interface(
    fn=chatbot_response,
    inputs=gr.Textbox(lines=2, placeholder="Enter your symptom..."),
    outputs="text",
    title="Intelligent Healthcare Triage Chatbot",
    description=(
        "This prototype demonstrates symptom intake, disease prediction, "
        "and clinical triage suggestions based on a dataset. "
        "Modular design allows future integration with Rasa for full appointment scheduling."
    )
)

iface.launch()